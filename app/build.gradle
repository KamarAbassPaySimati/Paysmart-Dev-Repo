plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    id "jacoco"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['connectedDevelopDebugAndroidTest', 'createDebugCoverageReport']

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${project.layout.buildDirectory}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "${project.layout.buildDirectory}", includes: ["jacoco/testDebugUnitTest.exec",
                                                                                       "outputs/code-coverage/connected/*coverage.ec"]))
}

android {
    namespace 'com.afrimax.paymaart'
    compileSdk 34

    defaultConfig {
        applicationId 'com.afrimax.paymaart'
        minSdk 24
        targetSdk 34
        versionCode 2
        versionName "1.0"

        testApplicationId 'com.afrimax.paymaart'
        testInstrumentationRunner 'com.afrimax.paymaart.TestJunitRunner'
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD

            // Optional, specify signing versions used
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }


    flavorDimensions = ['env']
    productFlavors{
        develop{
            dimension "env"
            applicationIdSuffix ".develop"
            buildConfigField("String", "STAGE", "\"dev\"")
            buildConfigField("String", "BASE_URL", "\"https://${env.DOMAIN_NAME.value}/v1/\"")
            buildConfigField("String", "CUSTOMER_COGNITO_IDENTITY_POOL_ID", "\"${env.CUSTOMER_COGNITO_IDENTITY_POOL_ID.value}\"")
            buildConfigField("String", "REGION", "\"eu-west-1\"")
            buildConfigField("String", "CUSTOMER_COGNITO_USERPOOL_ID", "\"${env.CUSTOMER_COGNITO_USERPOOL_ID.value}\"")
            buildConfigField("String", "CUSTOMER_COGNITO_CLIENT_ID", "\"${env.CUSTOMER_COGNITO_CLIENT_ID.value}\"")
            buildConfigField("String", "CUSTOMER_S3_BUCKET_NAME", "\"${env.BUCKET_NAME.value}\"")
            buildConfigField("String", "PLACES_API_KEY", "\"${env.PLACES_API_KEY.value}\"")
            buildConfigField("String", "CDN_BASE_URL", "\"https://${env.CDN_URL.value}/\"")
            buildConfigField("String", "PASSWORD_SECRET_KEY", "\"${env.PASSWORD_SECRET_KEY.value}\"")
            buildConfigField("String", "SITE_KEY", "\"${env.RECAPTCHA_SITE_KEY.value}\"")
        }

        qa{
            dimension "env"
            applicationIdSuffix ".qa"
            buildConfigField("String", "STAGE", "\"qa\"")
            buildConfigField("String", "BASE_URL", "\"https://${env.DOMAIN_NAME.value}/v1/\"")
            buildConfigField("String", "CUSTOMER_COGNITO_IDENTITY_POOL_ID", "\"${env.CUSTOMER_COGNITO_IDENTITY_POOL_ID.value}\"")
            buildConfigField("String", "REGION", "\"eu-west-1\"")
            buildConfigField("String", "CUSTOMER_COGNITO_USERPOOL_ID", "\"${env.CUSTOMER_COGNITO_USERPOOL_ID.value}\"")
            buildConfigField("String", "CUSTOMER_COGNITO_CLIENT_ID", "\"${env.CUSTOMER_COGNITO_CLIENT_ID.value}\"")
            buildConfigField("String", "CUSTOMER_S3_BUCKET_NAME", "\"${env.BUCKET_NAME.value}\"")
            buildConfigField("String", "PLACES_API_KEY", "\"${env.PLACES_API_KEY.value}\"")
            buildConfigField("String", "CDN_BASE_URL", "\"https://${env.CDN_URL.value}/\"")
            buildConfigField("String", "PASSWORD_SECRET_KEY", "\"${env.PASSWORD_SECRET_KEY.value}\"")
            buildConfigField("String", "SITE_KEY", "\"${env.RECAPTCHA_SITE_KEY.value}\"")
        }

        preprod{
            dimension "env"
            applicationIdSuffix ".preprod"
            buildConfigField("String", "STAGE", "\"pre-production\"")
            buildConfigField("String", "BASE_URL", "\"https://${env.DOMAIN_NAME.value}/v1/\"")
            buildConfigField("String", "CUSTOMER_COGNITO_IDENTITY_POOL_ID", "\"${env.CUSTOMER_COGNITO_IDENTITY_POOL_ID.value}\"")
            buildConfigField("String", "REGION", "\"eu-west-1\"")
            buildConfigField("String", "CUSTOMER_COGNITO_USERPOOL_ID", "\"${env.CUSTOMER_COGNITO_USERPOOL_ID.value}\"")
            buildConfigField("String", "CUSTOMER_COGNITO_CLIENT_ID", "\"${env.CUSTOMER_COGNITO_CLIENT_ID.value}\"")
            buildConfigField("String", "CUSTOMER_S3_BUCKET_NAME", "\"${env.BUCKET_NAME.value}\"")
            buildConfigField("String", "PLACES_API_KEY", "\"${env.PLACES_API_KEY.value}\"")
            buildConfigField("String", "CDN_BASE_URL", "\"https://${env.CDN_URL.value}/\"")
            buildConfigField("String", "PASSWORD_SECRET_KEY", "\"${env.PASSWORD_SECRET_KEY.value}\"")
            buildConfigField("String", "SITE_KEY", "\"${env.RECAPTCHA_SITE_KEY.value}\"")
        }

        production{
            dimension "env"
            buildConfigField("String", "STAGE", "\"prod\"")
            buildConfigField("String", "BASE_URL", "\"https://${env.DOMAIN_NAME.value}/v1/\"")
            buildConfigField("String", "CUSTOMER_COGNITO_IDENTITY_POOL_ID", "\"${env.CUSTOMER_COGNITO_IDENTITY_POOL_ID.value}\"")
            buildConfigField("String", "REGION", "\"eu-west-1\"")
            buildConfigField("String", "CUSTOMER_COGNITO_USERPOOL_ID", "\"${env.CUSTOMER_COGNITO_USERPOOL_ID.value}\"")
            buildConfigField("String", "CUSTOMER_COGNITO_CLIENT_ID", "\"${env.CUSTOMER_COGNITO_CLIENT_ID.value}\"")
            buildConfigField("String", "CUSTOMER_S3_BUCKET_NAME", "\"${env.BUCKET_NAME.value}\"")
            buildConfigField("String", "PLACES_API_KEY", "\"${env.PLACES_API_KEY.value}\"")
            buildConfigField("String", "CDN_BASE_URL", "\"https://${env.CDN_URL.value}/\"")
            buildConfigField("String", "PASSWORD_SECRET_KEY", "\"${env.PASSWORD_SECRET_KEY.value}\"")
            buildConfigField("String", "SITE_KEY", "\"${env.RECAPTCHA_SITE_KEY.value}\"")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.activity
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.fragment.ktx
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    //Cucumber for BDD
    androidTestImplementation(libs.cucumber.android)
    androidTestImplementation(libs.cucumber.picocontainer)
    implementation libs.poi.ooxml
    implementation(libs.xmlbeans)
    androidTestImplementation libs.stax.api
    androidTestImplementation libs.aalto.xml

    //dependency injection

    //Viewmodel
    implementation libs.androidx.lifecycle.viewmodel.ktx

    //Glide
    implementation libs.glide

    //lottie
    implementation libs.lottie

    //Retrofit & GSON
    implementation libs.retrofit
    implementation libs.converter.gson

    //Amplify
    implementation libs.aws.auth.cognito
    implementation libs.aws.storage.s3
    implementation libs.core.kotlin

    //Faker
    implementation(libs.datafaker)

    //Library for PIN EditText
    implementation libs.pinedittextfield

    //TOTP Generator for BDD
    implementation libs.kotlin.onetimepassword
    implementation libs.java.otp

    //JWT Token for BDD
    implementation libs.java.jwt

    //Places
    implementation libs.places

    //Camera
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.view
    implementation libs.androidx.camera.lifecycle

    //pdf viewer
    implementation libs.pdf.viewer

    //Zoom Layout
    implementation libs.zoomlayout

    //Espresso Contrib
    androidTestImplementation libs.espresso.contrib

    //Blurry
    implementation libs.blurry

    //SDP library for uniform size of layout resources in all type of screens
    implementation libs.sdp.android

    //For Image conversion purpose
    implementation libs.androidx.exifinterface

    //Google Recaptcha
//    implementation libs.play.services.safetynet
//    implementation libs.play.services.base
//    implementation libs.play.services.recaptcha
    implementation libs.recaptcha
}

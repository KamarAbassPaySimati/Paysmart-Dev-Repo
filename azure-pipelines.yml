trigger:
  branches:
    include:
      - qa
      - pre-production
      - master
pr:
  branches:
    include:
      - qa
variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    - group: production_customer
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/qa') }}:
    - group: qa_customer
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/pre-production') }}:
    - group: pre-production_customer
  - ${{ if or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')) }}:
    - group: develop_customer

jobs:
  - job: "Download_Environment"
    displayName: "Download Environment"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - script: |
          sudo pip3 install --upgrade pip
          pip3 install awscli --upgrade --user
          export PATH="/home/vsts/.local/bin:$PATH"
          sh scripts/envs.sh
        displayName: 'Copy Environment Files'
      - publish: $(System.DefaultWorkingDirectory)/.env
        artifact: Environment
    

  - job: "lint_sast_dast"
    displayName: "Lint , SAST, DAST"
    dependsOn: Download_Environment
    condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
    pool:
        vmImage: "ubuntu-latest"
    steps:
      - task: Gradle@3
        inputs:
          gradleWrapperFile: 'gradlew'
          tasks: 'lint'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          publishJUnitResults: true
          options: '--build-cache'
        displayName: 'Lint'
      - script: |
          wget https://github.com/insidersec/insider/releases/download/2.1.0/insider_2.1.0_linux_x86_64.tar.gz
          tar -xf insider_2.1.0_linux_x86_64.tar.gz 
          chmod +x insider
          ./insider --tech android  --target app/src
        displayName: 'Static Application Security Testing (SAST)'
      - script: |
          echo "test"
          # pip install --upgrade mobsfscan
          # mobsfscan -w app/src --config scripts/.mobsf
        displayName: 'Dynamic Application Security Testing (DAST)'
      - task: Cache@2
        inputs:
          key: '.gradle/**' # Swap build.gradle.kts for build.gradle when using Groovy
          path: $(System.DefaultWorkingDirectory)
        displayName: Configure gradle caching

  - job: android_build
    dependsOn: lint_sast_dast
    condition: and(or(contains(variables['build.SourceBranch'], 'feature'), contains(variables['build.SourceBranch'], 'bugfix'), contains(variables['build.SourceBranch'], 'hotfix')), succeeded())
    displayName: "Build"
    pool:
      vmImage: "macOS-latest"
    steps:
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadPipelineArtifact@2
        name: environment
        inputs:
          artifact: Environment
          targetPath: '$(System.DefaultWorkingDirectory)'
      - task: DownloadSecureFile@1
        name: deployment_secrity_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "afrimaxpayplatform-8783245672f3.json"
      - task: DownloadSecureFile@1
        name: deployment_keystore_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "paymaart_customer.jks"
      - script: |
          cp $(deployment_keystore_file.secureFilePath) $(System.DefaultWorkingDirectory)/paymaart_customer.jks
          cp $(deployment_secrity_file.secureFilePath) $(System.DefaultWorkingDirectory)/afrimaxpayplatform-8783245672f3.json
          cp $(System.DefaultWorkingDirectory)/paymaart_customer.jks $(System.DefaultWorkingDirectory)/app/paymaart_customer.jks
          brew install fastlane
          fastlane android develop
        displayName: 'Build'
  - job: BDD
    displayName: "Integration Testing"
    dependsOn: Download_Environment
    condition: and(succeeded(), contains(variables['build.SourceBranch'], 'qa'))
    pool:
      vmImage: "macos-latest"
    steps:
      
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadPipelineArtifact@2
        name: environment
        inputs:
          artifact: Environment
          targetPath: '$(System.DefaultWorkingDirectory)'
      - task: DownloadSecureFile@1
        name: deployment_secrity_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "afrimaxpayplatform-8783245672f3.json"
      - task: DownloadSecureFile@1
        name: deployment_keystore_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "paymaart_customer.jks"
      # - script: 'sh scripts/emulator_device.sh'
      #   displayName: 'Install Emulator'
      # - task: Gradle@3
      #   inputs:
      #     gradleWrapperFile: 'gradlew'
      #     tasks: 'connectedCheck'
      #     javaHomeOption: 'JDKVersion'
      #     jdkVersionOption: '1.17'
      #     publishJUnitResults: true
      #     options: '--build-cache'
      #   displayName: 'Integration Testing'
      # - script: |
      #       adb pull storage/emulated/0/Android/data/com.sevenedge.healthfit/files/reports ./test
      #       npm i axios
      #       node living-documenation.js 
      #     displayName: 'BDD Living documentation'
  
  - job: Android_Lambda_Test
    displayName: "Deploy"
    dependsOn: BDD
    condition: and(succeeded(), contains(variables['build.SourceBranch'], 'qa'))
    pool:
      vmImage: "macOS-13"
    steps:
      
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadPipelineArtifact@2
        name: environment
        inputs:
          artifact: Environment
          targetPath: '$(System.DefaultWorkingDirectory)'
      - task: DownloadSecureFile@1
        name: deployment_secrity_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "afrimaxpayplatform-8783245672f3.json"
      - task: DownloadSecureFile@1
        name: deployment_keystore_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "paymaart_customer.jks"
      - script: |
          cp $(deployment_keystore_file.secureFilePath) $(System.DefaultWorkingDirectory)/paymaart_customer.jks
          cp $(deployment_secrity_file.secureFilePath) $(System.DefaultWorkingDirectory)/afrimaxpayplatform-8783245672f3.json
          cp $(System.DefaultWorkingDirectory)/paymaart_customer.jks $(System.DefaultWorkingDirectory)/app/paymaart_customer.jks
          brew install fastlane
          fastlane android qa
        displayName: 'Deployment'

  - job: Production_Deployment
    displayName: "Deploy"
    condition: and(succeeded(), contains(variables['build.SourceBranch'], 'master'))
    pool:
      vmImage: "macOS-13"
    steps:
      
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadPipelineArtifact@2
        name: environment
        inputs:
          artifact: Environment
          targetPath: '$(System.DefaultWorkingDirectory)'
      - task: DownloadSecureFile@1
        name: deployment_secrity_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "afrimaxpayplatform-8783245672f3.json"
      - task: DownloadSecureFile@1
        name: deployment_keystore_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "paymaart_customer.jks"
      - script: |
          cp $(deployment_keystore_file.secureFilePath) $(System.DefaultWorkingDirectory)/paymaart_customer.jks
          cp $(deployment_secrity_file.secureFilePath) $(System.DefaultWorkingDirectory)/afrimaxpayplatform-8783245672f3.json
          cp $(System.DefaultWorkingDirectory)/paymaart_customer.jks $(System.DefaultWorkingDirectory)/app/paymaart_customer.jks
          export BUILD_NUMBER=$(Build.BuildId)
          brew install fastlane
          fastlane android production
        displayName: 'Deployment'
  
  - job: Pre_Production_Deployment
    displayName: "Deploy"
    condition: and(succeeded(), contains(variables['build.SourceBranch'], 'pre-production'))
    pool:
      vmImage: "macOS-13"
    steps:
      
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadPipelineArtifact@2
        name: environment
        inputs:
          artifact: Environment
          targetPath: '$(System.DefaultWorkingDirectory)'
      - task: DownloadSecureFile@1
        name: deployment_secrity_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "afrimaxpayplatform-8783245672f3.json"
      - task: DownloadSecureFile@1
        name: deployment_keystore_file
        displayName: 'Download Environment'
        inputs:
          secureFile: "paymaart_customer.jks"
      - script: |
          cp $(deployment_keystore_file.secureFilePath) $(System.DefaultWorkingDirectory)/paymaart_customer.jks
          cp $(deployment_secrity_file.secureFilePath) $(System.DefaultWorkingDirectory)/afrimaxpayplatform-8783245672f3.json
          cp $(System.DefaultWorkingDirectory)/paymaart_customer.jks $(System.DefaultWorkingDirectory)/app/paymaart_customer.jks
          brew install fastlane
          fastlane android production
        displayName: 'Deployment'
